Course Learning Outcomes and Knowledge and SkillsThis course contributes to the achievement of the following Course Learning Outcomes (CLO):School of Engineering TechCourse Code: CP130 Co-Requisites: N/A Pre-Requisites: N/ACourse Hours: 45.00The purpose of this course is to introduce students to the concepts of critical thinking, basic Information Technology (IT) concepts and the systems development process commonly used in a business environment. Discussion will centre on some of the approaches to problem-solving undertaken by an analyst, as well as some of the tools available in defining a system. This is an introductory course, which is meant to provide an overview of all phases of the Systems Development Life Cycle.The course content may be presented through a blend of instructional methods, including lecture, Internet, discussion, independent study, audio/video conferencing and videotape.Computer Programmer Program provided software: DreamSpark Premium - Microsoft VisioVLO 1 use documented solutions to troubleshoot problems associated with software installation and customization.VLO 2 develop, test, document, deploy, and maintain secure program code based on specifications.VLO 6 use relevant methodologies, policies, and standards to develop secure program code.VLO 8 conform to workplace expectations found in information technology (IT) environments.EES 4 apply a systematic approach to solve problems.EES 5 use a variety of thinking skills to anticipate and solve problems.EES 7 analyze, evaluate and apply relevant information from a variety of sources.<s1>CP130 - Critical Thinking & Analysis I, Page 1/5 © 2016 Confederation College1. seek out appropriate solutions for problems associated with software installation and customization2. follow appropriate methodologies to resolve problems effectively and minimize risk of recurrence 2. follow appropriate methodologies to resolve problems effectively and minimize risk of recurrence3. recognize personal limits and seek assistance in a timely manner to resolve problems beyond own knowledge 3. recognize personal limits and seek assistance in a timely manner to resolve problems beyond own knowledge and skills4. use appropriate programming languages to develop and maintain program code to design specifications 4. use appropriate programming languages to develop and maintain program code to design specifications5. use appropriate tools and techniques to develop, test, and maintain program code 5. use appropriate tools and techniques to develop, test, and maintain program code6. apply knowledge of a variety of techniques to test and debug programs 6. apply knowledge of a variety of techniques to test and debug programs7. prepare, present, and maintain current, clear, and accurate documentation 7. prepare, present, and maintain current, clear, and accurate documentation8. justify decisions related to the development of program code 8. justify decisions related to the development of program code1.1 seek out common problem-specific heuristics (rules of thumb) to simplify problem solving2.1 follow the brute force methodology to try all possible options to solve a limited size problem2.2 follow the backtracking methodology to reduce the investigated possible options to solve a problem with constraints2.3 follow problem-specific heuristics to reduce the possible solutions to a problem to a manageable size2.4 perform root cause analysis2.5 follow the decomposition methodology to break down big problems into small solvable problems2.6 follow problem solving techniques such as brute force, backtracking and cause elimination to debug programs3.1 recognize when pseudocode planning requires knowledge and skills outside your own, and seek assistance4.1 use a programming language to write algorithms for a defined solution5.1 use a flowchart to describe the solution to a problem5.2 define the inputs and outputs of a problem5.3 use conditions to exit loops5.4 use a decision table to determine which action to apply5.5 identify the need for a loop to solve a problem5.6 use pseudocode to describe the solution to a problem5.7 use decomposition, flowcharts, and pseudocode to define a solution to a problem6.1 use a table to keep track of loop iterations6.2 use a table to trace the solution7.1 prepare a programming comment from pseudocode to document a solution to a problem8.1 justify the use of Boolean logical operators (and, exclusive or, inclusive or) to clarify a problem8.2 justify the use of high-level programming languages and compilers to translate human readable code into a machine readable program8.3 justify the use of conditional expressions (If, then, else) to break down a problem8.4 justify the use of recursion instead of iteration to define a solution to a problem8.5 justify the use of compound expressions to clarify a problem8.6 justify the use of relation or equal operators to clarify a problem<s1>CP130 - Critical Thinking & Analysis I, Page 2/5 © 2016 Confederation College9. use an appropriate software development methodology10. Identify appropriate practices, processes, and procedures which ensure quality software development 10. Identify appropriate practices, processes, and procedures which ensure quality software development11. Use language and terminology suited to the context 11. Use language and terminology suited to the context